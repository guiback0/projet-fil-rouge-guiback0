services:
  # PostgreSQL Database
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    container_name: ${DATABASE_CONTAINER_NAME:-access_mns_database}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-access_mns}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure-password-change-this-in-production}
      POSTGRES_USER: ${POSTGRES_USER:-access_mns_user}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
    ports:
      - "5432:5432"
    networks:
      - app-network

  # Symfony Backend (access_mns_manager)
  backend:
    build:
      context: ./access_mns_manager
      target: frankenphp_dev
    container_name: ${MANAGER_CONTAINER_NAME:-access_mns_manager}
    restart: unless-stopped
    environment:
      SERVER_NAME: localhost, backend:80
      MERCURE_PUBLISHER_JWT_KEY: "!ChangeThisMercureHubJWTSecretKey!"
      MERCURE_SUBSCRIBER_JWT_KEY: "!ChangeThisMercureHubJWTSecretKey!"
      DATABASE_URL: ${DATABASE_URL}
      MERCURE_URL: http://backend/.well-known/mercure
      MERCURE_PUBLIC_URL: https://localhost:${MANAGER_PORT:-8000}/.well-known/mercure
      MERCURE_JWT_SECRET: "!ChangeThisMercureHubJWTSecretKey!"
      SYMFONY_VERSION: ${SYMFONY_VERSION}
      STABILITY: stable
      APP_ENV: ${APP_ENV:-dev}
      APP_SECRET: ${APP_SECRET}
      FRANKENPHP_WORKER_CONFIG: watch
      XDEBUG_MODE: off
      # Trusted proxies for reverse proxy configuration
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.1,172.16.0.0/12,10.0.0.0/8,192.168.0.0/16}
    volumes:
      - ./access_mns_manager:/app
      - ./access_mns_manager/frankenphp/Caddyfile:/etc/frankenphp/Caddyfile:ro
      - ./access_mns_manager/frankenphp/conf.d/20-app.dev.ini:/usr/local/etc/php/app.conf.d/20-app.dev.ini:ro
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "${MANAGER_PORT:-8000}:80"   # HTTP backend
      - "8443:443"  # HTTPS backend
    depends_on:
      - database
    networks:
      - app-network
    extra_hosts:
      - host.docker.internal:host-gateway
    tty: true

  # Angular Frontend (access_mns_client)
  frontend:
    build:
      context: ./access_mns_client
      dockerfile: Dockerfile
    container_name: ${CLIENT_CONTAINER_NAME:-access_mns_client}
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-4200}:4200"  # Angular frontend
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - NODE_ENV=production

  # Nginx Reverse Proxy (optional - for production-like setup)
  proxy:
    image: nginx:alpine
    container_name: ${PROXY_CONTAINER_NAME:-access_mns_proxy}
    restart: unless-stopped
    ports:
      - "${PROXY_HTTP_PORT:-80}:80"     # Main entry point
      - "${PROXY_HTTPS_PORT:-443}:443"   # HTTPS entry point
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

volumes:
  caddy_data:
  caddy_config:
  database_data:

networks:
  app-network:
    driver: bridge
