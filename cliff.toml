# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration


[changelog]
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
    # Replace the placeholder <REPO> with a URL.
    #{ pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" },
]

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = false
# Exclude commits that are not matched by the conventional commits specification.
filter_unconventional = false
# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = []
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    # Skip pull request merge commits (put these first to catch them early)
    { message = "^Merge pull request", skip = true },
    { message = "^Merge PR", skip = true },
    { message = "^Merged PR", skip = true },
    { message = "^Merge branch.*into", skip = true },
    { message = "^Merge remote-tracking branch", skip = true },
    { message = "^Auto-merged", skip = true },
    { message = "^Automatic merge", skip = true },
    { message = "^Merge.*from.*into", skip = true },
    { message = "^Pull request.*merged", skip = true },
    
    # Skip other maintenance commits
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    
    # General emoji patterns for features and additions
    { message = "^🎉", group = "<!-- 0 -->🚀 Features" },
    { message = "^✨", group = "<!-- 0 -->🚀 Features" },
    { message = "^🆕", group = "<!-- 0 -->🚀 Features" },
    { message = "^➕", group = "<!-- 0 -->🚀 Features" },
    { message = "^🏷️", group = "<!-- 0 -->🚀 Features" },
    { message = "^🗃️", group = "<!-- 0 -->🚀 Features" },
    { message = "^👽️", group = "<!-- 0 -->🚀 Features" },
    { message = "^🌐", group = "<!-- 0 -->🚀 Features" },
    { message = "^♿", group = "<!-- 0 -->🚀 Features" },
    
    # Bug fixes
    { message = "^🐛", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^🔧", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^🩹", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^🚑️", group = "<!-- 1 -->🐛 Bug Fixes" },
    
    # Refactoring and removal
    { message = "^🔥", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^♻️", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^🚚", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^🏗️", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^⚗️", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^🗑️", group = "<!-- 2 -->🚜 Refactor" },
    
    # Documentation
    { message = "^📚", group = "<!-- 3 -->📚 Documentation" },
    { message = "^📝", group = "<!-- 3 -->📚 Documentation" },
    { message = "^💡", group = "<!-- 3 -->📚 Documentation" },
    { message = "^📄", group = "<!-- 3 -->📚 Documentation" },
    
    # Performance
    { message = "^⚡", group = "<!-- 4 -->⚡ Performance" },
    { message = "^🐎", group = "<!-- 4 -->⚡ Performance" },
    
    # Styling and UI
    { message = "^💄", group = "<!-- 5 -->🎨 Styling" },
    { message = "^🎨", group = "<!-- 5 -->🎨 Styling" },
    { message = "^🚨", group = "<!-- 5 -->🎨 Styling" },
    { message = "^📱", group = "<!-- 5 -->🎨 Styling" },
    { message = "^💻", group = "<!-- 5 -->🎨 Styling" },
    { message = "^🚸", group = "<!-- 5 -->🎨 Styling" },
    
    # Testing
    { message = "^🧪", group = "<!-- 6 -->🧪 Testing" },
    { message = "^✅", group = "<!-- 6 -->🧪 Testing" },
    { message = "^🤡", group = "<!-- 6 -->🧪 Testing" },
    
    # Miscellaneous tasks and configuration
    { message = "^🔧", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^⚙️", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^📦", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^🔖", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^📌", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^⬆️", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^⬇️", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^💚", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^👷", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^🍱", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^🏁", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^🤖", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^🍎", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^🐧", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    
    # Security
    { message = "^🔒️", group = "<!-- 8 -->🛡️ Security" },
    { message = "^🔐", group = "<!-- 8 -->🛡️ Security" },
    { message = "^🛡️", group = "<!-- 8 -->🛡️ Security" },
    
    # Revert
    { message = "^⏪️", group = "<!-- 9 -->◀️ Revert" },
    { message = "^🔀", group = "<!-- 9 -->◀️ Revert" },
    
    # Conventional commits (fallback)
    { message = "^feat", group = "<!-- 0 -->🚀 Features" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
    { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
    { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^style", group = "<!-- 5 -->🎨 Styling" },
    { message = "^test", group = "<!-- 6 -->🧪 Testing" },
    { message = "^chore", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
    
    # Catch-all for anything else
    { message = ".*", group = "<!-- 10 -->💼 Other" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# An array of link parsers for extracting external references, and turning them into URLs, using regex.
link_parsers = []
# Include only the tags that belong to the current branch.
use_branch_tags = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order releases topologically instead of chronologically.
topo_order_commits = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"
# Process submodules commits
recurse_submodules = false
